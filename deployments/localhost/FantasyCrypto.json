{
  "address": "0xc96304e3c037f81dA488ed9dEa1D8F2a48278a75",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "auth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumTokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_robodogeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roboDogeStaking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[10]",
          "name": "aggregatorAddress",
          "type": "address[10]"
        }
      ],
      "name": "enteredPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "poolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "winner",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "rewardsDistributed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AuthAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryFees",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolID",
          "type": "uint256"
        },
        {
          "internalType": "address[10]",
          "name": "_aggregatorAddress",
          "type": "address[10]"
        }
      ],
      "name": "enterPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolID",
          "type": "uint256"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "entryFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "userAddress",
              "type": "address[]"
            }
          ],
          "internalType": "struct FantasyCrypto.pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getUserSelectionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[10]",
              "name": "aggregatorAddresses",
              "type": "address[10]"
            }
          ],
          "internalType": "struct FantasyCrypto.userDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auth",
          "type": "address"
        }
      ],
      "name": "setAuth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolID",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "setWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumTokenBalance",
          "type": "uint256"
        }
      ],
      "name": "setminimumTokenBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewActivePools",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc4863e771ad86530b8e44a754a8574a0136080826985c9abb23731dafa9451f2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc96304e3c037f81dA488ed9dEa1D8F2a48278a75",
    "transactionIndex": 0,
    "gasUsed": "2720890",
    "logsBloom": "0x
    "blockHash": "0xd4a1dc63ddcf35a8f68e05aac593824c7464798de072720d0d3bc3002300e1f7",
    "transactionHash": "0xc4863e771ad86530b8e44a754a8574a0136080826985c9abb23731dafa9451f2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 199,
        "transactionHash": "0xc4863e771ad86530b8e44a754a8574a0136080826985c9abb23731dafa9451f2",
        "address": "0xc96304e3c037f81dA488ed9dEa1D8F2a48278a75",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd4a1dc63ddcf35a8f68e05aac593824c7464798de072720d0d3bc3002300e1f7"
      }
    ],
    "blockNumber": 199,
    "cumulativeGasUsed": "2720890",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    0,
    "0xc0F115A19107322cFBf1cDBC7ea011C19EbDB4F8",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "d048d49dfbf3f8d38aa65d095de89e17",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_robodogeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roboDogeStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[10]\",\"name\":\"aggregatorAddress\",\"type\":\"address[10]\"}],\"name\":\"enteredPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"poolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winner\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"rewardsDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AuthAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"address[10]\",\"name\":\"_aggregatorAddress\",\"type\":\"address[10]\"}],\"name\":\"enterPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"userAddress\",\"type\":\"address[]\"}],\"internalType\":\"struct FantasyCrypto.pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserSelectionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address[10]\",\"name\":\"aggregatorAddresses\",\"type\":\"address[10]\"}],\"internalType\":\"struct FantasyCrypto.userDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auth\",\"type\":\"address\"}],\"name\":\"setAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"setWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTokenBalance\",\"type\":\"uint256\"}],\"name\":\"setminimumTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewActivePools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FantasyCrypto.sol\":\"FantasyCrypto\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/FantasyCrypto.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\ninterface AggregatorV3Interface {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\ninterface RoboDogeCoin {\\n    function balanceOf(address _address) external view returns (uint256);\\n}\\n\\ninterface RoboDogeStaking {\\n    struct Stake {\\n        uint256 tAmount;\\n        uint256 rAmount;\\n        uint256 time;\\n        uint256 period;\\n        uint256 rate;\\n        bool isActive;\\n    }\\n\\n    function getAllStakes(address _address)\\n        external\\n        view\\n        returns (Stake[] memory);\\n}\\n\\ncontract FantasyCrypto is Ownable {\\n    RoboDogeCoin private token;\\n    RoboDogeStaking private staking;\\n\\n    struct pool {\\n        uint256 entryFee;\\n        address tokenAddress;\\n        uint256 startTime;\\n        uint256 endTime;\\n        address[] userAddress;\\n    }\\n    struct userDetails {\\n        address[10] aggregatorAddresses;\\n    }\\n\\n    struct winner {\\n        address[] user;\\n        uint256[] amount;\\n    }\\n\\n    uint256 public minimumTokenBalance;\\n    address public AuthAddress;\\n    uint256 public poolCounter = 0;\\n    mapping(uint256 => pool) public pools;\\n    mapping(uint256 => mapping(address => userDetails)) internal userSelection;\\n    mapping(address => uint256) public feeAmount;\\n    mapping(uint256 => winner) internal winnerDetails;\\n\\n    event poolCreated(\\n        uint256 poolID,\\n        uint256 entryFees,\\n        uint256 startTime,\\n        uint256 endTime,\\n        address tokenAddress\\n    );\\n    event enteredPool(\\n        address user,\\n        uint256 poolID,\\n        address[10] aggregatorAddress\\n    );\\n    event rewardsDistributed(\\n        uint256 poolID,\\n        address[] winner,\\n        uint256[] amount\\n    );\\n\\n    constructor(\\n        address auth,\\n        uint256 _minimumTokenBalance,\\n        address _robodogeToken,\\n        address _roboDogeStaking\\n    ) {\\n        AuthAddress = auth;\\n        minimumTokenBalance = _minimumTokenBalance;\\n        token = RoboDogeCoin(_robodogeToken);\\n        staking = RoboDogeStaking(_roboDogeStaking);\\n    }\\n\\n    modifier isAuth() {\\n        require(msg.sender == AuthAddress, \\\"Address is not AuthAddress\\\");\\n        _;\\n    }\\n\\n    function createPool(\\n        uint256 entryFees,\\n        address _tokenAddress,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) external onlyOwner {\\n        require(\\n            _startTime < _endTime,\\n            \\\"Start time cannot be greater than end time.\\\"\\n        );\\n        require(\\n            _startTime > block.timestamp,\\n            \\\"Start time must be greator than current time\\\"\\n        );\\n        require(\\n            _tokenAddress != address(0),\\n            \\\"Token Address must not be zero address\\\"\\n        );\\n        pools[poolCounter].entryFee = entryFees;\\n        pools[poolCounter].startTime = _startTime;\\n        pools[poolCounter].endTime = _endTime;\\n        pools[poolCounter].tokenAddress = _tokenAddress;\\n        emit poolCreated(\\n            poolCounter,\\n            entryFees,\\n            _startTime,\\n            _endTime,\\n            _tokenAddress\\n        );\\n        poolCounter++;\\n    }\\n\\n    function enterPool(uint256 _poolID, address[10] memory _aggregatorAddress)\\n        external\\n        payable\\n    {\\n        uint256 sum = 0;\\n        // if (token.balanceOf(msg.sender) < minimumTokenBalance) {\\n        //     for (\\n        //         uint256 i = 0;\\n        //         i < staking.getAllStakes(msg.sender).length;\\n        //         i++\\n        //     ) {\\n        //         if (staking.getAllStakes(msg.sender)[i].isActive) {\\n        //             sum += staking.getAllStakes(msg.sender)[i].tAmount;\\n        //         }\\n        //     }\\n        // }\\n\\n        require(\\n            // token.balanceOf(msg.sender) >= minimumTokenBalance ||\\n            sum >= minimumTokenBalance,\\n            \\\"You dont have minimum RoboDoge Tokens.\\\"\\n        );\\n        require(\\n            userSelection[_poolID][msg.sender].aggregatorAddresses[0] ==\\n                address(0),\\n            \\\"User already entered the pool\\\"\\n        );\\n        require(\\n            block.timestamp < pools[_poolID].startTime,\\n            \\\"Pool has already started.\\\"\\n        );\\n        require(_poolID < poolCounter, \\\"Pool ID must exist\\\");\\n        // for (uint256 i = 0; i < 10; i++) {\\n        //     address _address = _aggregatorAddress[i];\\n        //     int256 answer;\\n        //     (, answer, , , ) = AggregatorV3Interface(_address)\\n        //         .latestRoundData();\\n        //     require(answer > 0, \\\"Aggregator address does not exists\\\");\\n        // }\\n        userSelection[_poolID][msg.sender]\\n            .aggregatorAddresses = _aggregatorAddress;\\n        IERC20(pools[_poolID].tokenAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            pools[_poolID].entryFee\\n        );\\n        pools[_poolID].userAddress.push(msg.sender);\\n        emit enteredPool(msg.sender, _poolID, _aggregatorAddress);\\n    }\\n\\n    function withdrawFees(address tokenAddress) external onlyOwner {\\n        require(feeAmount[tokenAddress] > 0, \\\"No fees has been collected yet.\\\");\\n        uint256 fee = feeAmount[tokenAddress];\\n        delete feeAmount[tokenAddress];\\n        IERC20(tokenAddress).transfer(msg.sender, fee);\\n    }\\n\\n    function setWinner(\\n        uint256 _poolID,\\n        address[] memory winners,\\n        uint256[] memory amount\\n    ) external isAuth {\\n        require(\\n            block.timestamp > pools[_poolID].endTime,\\n            \\\"The pool has not been ended yet.\\\"\\n        );\\n        require(\\n            winnerDetails[_poolID].user[0] == address(0),\\n            \\\"Winners are already set for this pool.\\\"\\n        );\\n        require(\\n            winners.length < pools[_poolID].userAddress.length,\\n            \\\"Winners must be less than total users.\\\"\\n        );\\n        winnerDetails[_poolID].user = winners;\\n        winnerDetails[_poolID].amount = amount;\\n    }\\n\\n    function claimReward(uint256 _poolID, uint256 position) external {\\n        require(\\n            msg.sender == winnerDetails[_poolID].user[position],\\n            \\\"You are not the winner for this position.\\\"\\n        );\\n        require(\\n            block.timestamp > pools[_poolID].endTime,\\n            \\\"The pool has not been ended yet\\\"\\n        );\\n        winnerDetails[_poolID].user[position] = address(0);\\n        IERC20(pools[_poolID].tokenAddress).transfer(\\n            msg.sender,\\n            winnerDetails[_poolID].amount[position]\\n        );\\n    }\\n\\n    function setAuth(address _auth) external onlyOwner {\\n        AuthAddress = _auth;\\n    }\\n\\n    function setminimumTokenBalance(uint256 _minimumTokenBalance)\\n        external\\n        onlyOwner\\n    {\\n        minimumTokenBalance = _minimumTokenBalance;\\n    }\\n\\n    function viewActivePools()\\n        external\\n        view\\n        returns (uint256[] memory, uint256)\\n    {\\n        uint256[] memory activePools = new uint256[](poolCounter);\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < poolCounter; i++) {\\n            if (pools[i].startTime > 0) {\\n                activePools[count] = i;\\n                count++;\\n            }\\n        }\\n        return (activePools, count);\\n    }\\n\\n    function getPoolInfo(uint256 _poolID) external view returns (pool memory) {\\n        return pools[_poolID];\\n    }\\n\\n    function getUserSelectionInfo(uint256 _poolID, address _address)\\n        external\\n        view\\n        returns (userDetails memory)\\n    {\\n        return userSelection[_poolID][_address];\\n    }\\n}\\n\",\"keccak256\":\"0x7c20b23b1794cbdd056c0ee23a6539590749aa78bd8bead61c3850b8cc64cdf6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006005553480156200001657600080fd5b50604051620032013803806200320183398181016040528101906200003c91906200022a565b6200005c620000506200013060201b60201c565b6200013860201b60201c565b83600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260038190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000308565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200020d81620002d4565b92915050565b6000815190506200022481620002ee565b92915050565b600080600080608085870312156200024157600080fd5b60006200025187828801620001fc565b9450506020620002648782880162000213565b93505060406200027787828801620001fc565b92505060606200028a87828801620001fc565b91505092959194509250565b6000620002a382620002aa565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620002df8162000296565b8114620002eb57600080fd5b50565b620002f981620002ca565b81146200030557600080fd5b50565b612ee980620003186000396000f3fe6080604052600436106101095760003560e01c80637e9c0891116100955780639e3079cb116100645780639e3079cb14610347578063a5a7274e14610372578063ac4afa381461039d578063efa5aa19146103dd578063f2fde38b1461040657610109565b80637e9c08911461028d57806386bb8f37146102ca5780638da5cb5b146102f3578063970d6a3f1461031e57610109565b80632b2e05c1116100dc5780632b2e05c1146101a75780632c224e51146101d05780632f380b35146101fc578063715018a6146102395780637488fcf51461025057610109565b806302625c1d1461010e5780630a54a4521461012a578063164e68de14610155578063264f173e1461017e575b600080fd5b61012860048036038101906101239190611eba565b61042f565b005b34801561013657600080fd5b5061013f610824565b60405161014c919061276c565b60405180910390f35b34801561016157600080fd5b5061017c60048036038101906101779190611da0565b61082a565b005b34801561018a57600080fd5b506101a560048036038101906101a09190611df2565b610a41565b005b3480156101b357600080fd5b506101ce60048036038101906101c99190611da0565b610ac7565b005b3480156101dc57600080fd5b506101e5610b87565b6040516101f39291906124fe565b60405180910390f35b34801561020857600080fd5b50610223600480360381019061021e9190611df2565b610ca1565b604051610230919061272e565b60405180910390f35b34801561024557600080fd5b5061024e610dd0565b005b34801561025c57600080fd5b5061027760048036038101906102729190611e1b565b610e58565b6040516102849190612750565b60405180910390f35b34801561029957600080fd5b506102b460048036038101906102af9190611da0565b610f3e565b6040516102c1919061276c565b60405180910390f35b3480156102d657600080fd5b506102f160048036038101906102ec9190611f76565b610f56565b005b3480156102ff57600080fd5b5061030861124c565b604051610315919061244b565b60405180910390f35b34801561032a57600080fd5b5061034560048036038101906103409190611ef7565b611275565b005b34801561035357600080fd5b5061035c6114fc565b604051610369919061276c565b60405180910390f35b34801561037e57600080fd5b50610387611502565b604051610394919061244b565b60405180910390f35b3480156103a957600080fd5b506103c460048036038101906103bf9190611df2565b611528565b6040516103d49493929190612787565b60405180910390f35b3480156103e957600080fd5b5061040460048036038101906103ff9190611e57565b611578565b005b34801561041257600080fd5b5061042d60048036038101906104289190611da0565b6117f5565b005b6000600354811015610476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046d906126ce565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166007600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000600a811061051a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610592576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105899061254e565b60405180910390fd5b600660008481526020019081526020016000206002015442106105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e1906125ee565b60405180910390fd5b600554831061062e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610625906126ee565b60405180910390fd5b816007600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190600a6106909291906119b9565b506006600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060066000888152602001908152602001600020600001546040518463ffffffff1660e01b815260040161071a93929190612466565b602060405180830381600087803b15801561073457600080fd5b505af1158015610748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076c9190611dc9565b5060066000848152602001908152602001600020600401339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f698386947438dbfb4dbae71510c638c396bb35e2fcb05c26a2a94bad4290c3bf338484604051610817939291906124c6565b60405180910390a1505050565b60035481565b6108326118ed565b73ffffffffffffffffffffffffffffffffffffffff1661085061124c565b73ffffffffffffffffffffffffffffffffffffffff16146108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d9061268e565b60405180910390fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610928576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091f906125ae565b60405180910390fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016109ea92919061249d565b602060405180830381600087803b158015610a0457600080fd5b505af1158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c9190611dc9565b505050565b610a496118ed565b73ffffffffffffffffffffffffffffffffffffffff16610a6761124c565b73ffffffffffffffffffffffffffffffffffffffff1614610abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab49061268e565b60405180910390fd5b8060038190555050565b610acf6118ed565b73ffffffffffffffffffffffffffffffffffffffff16610aed61124c565b73ffffffffffffffffffffffffffffffffffffffff1614610b43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3a9061268e565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060008060055467ffffffffffffffff811115610bce577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610bfc5781602001602082028036833780820191505090505b5090506000805b600554811015610c9457600060066000838152602001908152602001600020600201541115610c815780838381518110610c66577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508180610c7d906129f6565b9250505b8080610c8c906129f6565b915050610c03565b5081819350935050509091565b610ca9611a36565b600660008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020018280548015610dc057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d76575b5050505050815250509050919050565b610dd86118ed565b73ffffffffffffffffffffffffffffffffffffffff16610df661124c565b73ffffffffffffffffffffffffffffffffffffffff1614610e4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e439061268e565b60405180910390fd5b610e5660006118f5565b565b610e60611a7b565b6007600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180602001604052908160008201600a806020026040519081016040528092919082600a8015610f2d576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ee3575b505050505081525050905092915050565b60086020528060005260406000206000915090505481565b600960008381526020019081526020016000206000018181548110610fa4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461103c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110339061270e565b60405180910390fd5b60066000838152602001908152602001600020600301544211611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b9061256e565b60405180910390fd5b60006009600084815260200190815260200160002060000182815481106110e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336009600086815260200190815260200160002060010184815481106111cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001546040518363ffffffff1660e01b81526004016111f592919061249d565b602060405180830381600087803b15801561120f57600080fd5b505af1158015611223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112479190611dc9565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fc906125ce565b60405180910390fd5b6006600084815260200190815260200160002060030154421161135d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113549061260e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960008581526020019081526020016000206000016000815481106113c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143c906126ae565b60405180910390fd5b60066000848152602001908152602001600020600401805490508251106114a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114989061266e565b60405180910390fd5b816009600085815260200190815260200160002060000190805190602001906114cb929190611a94565b50806009600085815260200190815260200160002060010190805190602001906114f6929190611b1e565b50505050565b60055481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154905084565b6115806118ed565b73ffffffffffffffffffffffffffffffffffffffff1661159e61124c565b73ffffffffffffffffffffffffffffffffffffffff16146115f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115eb9061268e565b60405180910390fd5b808210611636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162d9061262e565b60405180910390fd5b428211611678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166f9061264e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156116e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116df9061252e565b60405180910390fd5b8360066000600554815260200190815260200160002060000181905550816006600060055481526020019081526020016000206002018190555080600660006005548152602001908152602001600020600301819055508260066000600554815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4a387c1c496fd587cee4aeec2d3b960a0b382a9b678760dbe974026bdba919e0600554858484876040516117cf9594939291906127cc565b60405180910390a1600560008154809291906117ea906129f6565b919050555050505050565b6117fd6118ed565b73ffffffffffffffffffffffffffffffffffffffff1661181b61124c565b73ffffffffffffffffffffffffffffffffffffffff1614611871576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118689061268e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d89061258e565b60405180910390fd5b6118ea816118f5565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82600a8101928215611a25579160200282015b82811115611a245782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906119cc565b5b509050611a329190611b6b565b5090565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b6040518060200160405280611a8e611b88565b81525090565b828054828255906000526020600020908101928215611b0d579160200282015b82811115611b0c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611ab4565b5b509050611b1a9190611b6b565b5090565b828054828255906000526020600020908101928215611b5a579160200282015b82811115611b59578251825591602001919060010190611b3e565b5b509050611b679190611b6b565b5090565b5b80821115611b84576000816000905550600101611b6c565b5090565b604051806101400160405280600a90602082028036833780820191505090505090565b6000611bbe611bb984612844565b61281f565b90508082856020860282011115611bd457600080fd5b60005b85811015611c045781611bea8882611ce6565b845260208401935060208301925050600181019050611bd7565b5050509392505050565b6000611c21611c1c8461286a565b61281f565b90508083825260208201905082856020860282011115611c4057600080fd5b60005b85811015611c705781611c568882611ce6565b845260208401935060208301925050600181019050611c43565b5050509392505050565b6000611c8d611c8884612896565b61281f565b90508083825260208201905082856020860282011115611cac57600080fd5b60005b85811015611cdc5781611cc28882611d8b565b845260208401935060208301925050600181019050611caf565b5050509392505050565b600081359050611cf581612e6e565b92915050565b600082601f830112611d0c57600080fd5b600a611d19848285611bab565b91505092915050565b600082601f830112611d3357600080fd5b8135611d43848260208601611c0e565b91505092915050565b600082601f830112611d5d57600080fd5b8135611d6d848260208601611c7a565b91505092915050565b600081519050611d8581612e85565b92915050565b600081359050611d9a81612e9c565b92915050565b600060208284031215611db257600080fd5b6000611dc084828501611ce6565b91505092915050565b600060208284031215611ddb57600080fd5b6000611de984828501611d76565b91505092915050565b600060208284031215611e0457600080fd5b6000611e1284828501611d8b565b91505092915050565b60008060408385031215611e2e57600080fd5b6000611e3c85828601611d8b565b9250506020611e4d85828601611ce6565b9150509250929050565b60008060008060808587031215611e6d57600080fd5b6000611e7b87828801611d8b565b9450506020611e8c87828801611ce6565b9350506040611e9d87828801611d8b565b9250506060611eae87828801611d8b565b91505092959194509250565b6000806101608385031215611ece57600080fd5b6000611edc85828601611d8b565b9250506020611eed85828601611cfb565b9150509250929050565b600080600060608486031215611f0c57600080fd5b6000611f1a86828701611d8b565b935050602084013567ffffffffffffffff811115611f3757600080fd5b611f4386828701611d22565b925050604084013567ffffffffffffffff811115611f6057600080fd5b611f6c86828701611d4c565b9150509250925092565b60008060408385031215611f8957600080fd5b6000611f9785828601611d8b565b9250506020611fa885828601611d8b565b9150509250929050565b6000611fbe8383611fe2565b60208301905092915050565b6000611fd6838361242d565b60208301905092915050565b611feb8161297d565b82525050565b611ffa8161297d565b82525050565b612009816128ec565b6120138184612934565b925061201e826128c2565b8060005b8381101561204f5781516120368782611fb2565b96506120418361290d565b925050600181019050612022565b505050505050565b612060816128ec565b61206a818461293f565b9250612075826128c2565b8060005b838110156120a657815161208d8782611fb2565b96506120988361290d565b925050600181019050612079565b505050505050565b60006120b9826128f7565b6120c3818561294a565b93506120ce836128cc565b8060005b838110156120ff5781516120e68882611fb2565b97506120f18361291a565b9250506001810190506120d2565b5085935050505092915050565b600061211782612902565b612121818561295b565b935061212c836128dc565b8060005b8381101561215d5781516121448882611fca565b975061214f83612927565b925050600181019050612130565b5085935050505092915050565b600061217760268361296c565b915061218282612aae565b604082019050919050565b600061219a601d8361296c565b91506121a582612afd565b602082019050919050565b60006121bd601f8361296c565b91506121c882612b26565b602082019050919050565b60006121e060268361296c565b91506121eb82612b4f565b604082019050919050565b6000612203601f8361296c565b915061220e82612b9e565b602082019050919050565b6000612226601a8361296c565b915061223182612bc7565b602082019050919050565b600061224960198361296c565b915061225482612bf0565b602082019050919050565b600061226c60208361296c565b915061227782612c19565b602082019050919050565b600061228f602b8361296c565b915061229a82612c42565b604082019050919050565b60006122b2602c8361296c565b91506122bd82612c91565b604082019050919050565b60006122d560268361296c565b91506122e082612ce0565b604082019050919050565b60006122f860208361296c565b915061230382612d2f565b602082019050919050565b600061231b60268361296c565b915061232682612d58565b604082019050919050565b600061233e60268361296c565b915061234982612da7565b604082019050919050565b600061236160128361296c565b915061236c82612df6565b602082019050919050565b600061238460298361296c565b915061238f82612e1f565b604082019050919050565b600060a0830160008301516123b2600086018261242d565b5060208301516123c56020860182611fe2565b5060408301516123d8604086018261242d565b5060608301516123eb606086018261242d565b506080830151848203608086015261240382826120ae565b9150508091505092915050565b610140820160008201516124276000850182612000565b50505050565b612436816129bb565b82525050565b612445816129bb565b82525050565b60006020820190506124606000830184611ff1565b92915050565b600060608201905061247b6000830186611ff1565b6124886020830185611ff1565b612495604083018461243c565b949350505050565b60006040820190506124b26000830185611ff1565b6124bf602083018461243c565b9392505050565b6000610180820190506124dc6000830186611ff1565b6124e9602083018561243c565b6124f66040830184612057565b949350505050565b60006040820190508181036000830152612518818561210c565b9050612527602083018461243c565b9392505050565b600060208201905081810360008301526125478161216a565b9050919050565b600060208201905081810360008301526125678161218d565b9050919050565b60006020820190508181036000830152612587816121b0565b9050919050565b600060208201905081810360008301526125a7816121d3565b9050919050565b600060208201905081810360008301526125c7816121f6565b9050919050565b600060208201905081810360008301526125e781612219565b9050919050565b600060208201905081810360008301526126078161223c565b9050919050565b600060208201905081810360008301526126278161225f565b9050919050565b6000602082019050818103600083015261264781612282565b9050919050565b60006020820190508181036000830152612667816122a5565b9050919050565b60006020820190508181036000830152612687816122c8565b9050919050565b600060208201905081810360008301526126a7816122eb565b9050919050565b600060208201905081810360008301526126c78161230e565b9050919050565b600060208201905081810360008301526126e781612331565b9050919050565b6000602082019050818103600083015261270781612354565b9050919050565b6000602082019050818103600083015261272781612377565b9050919050565b60006020820190508181036000830152612748818461239a565b905092915050565b6000610140820190506127666000830184612410565b92915050565b6000602082019050612781600083018461243c565b92915050565b600060808201905061279c600083018761243c565b6127a96020830186611ff1565b6127b6604083018561243c565b6127c3606083018461243c565b95945050505050565b600060a0820190506127e1600083018861243c565b6127ee602083018761243c565b6127fb604083018661243c565b612808606083018561243c565b6128156080830184611ff1565b9695505050505050565b600061282961283a565b905061283582826129c5565b919050565b6000604051905090565b600067ffffffffffffffff82111561285f5761285e612a6e565b5b602082029050919050565b600067ffffffffffffffff82111561288557612884612a6e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156128b1576128b0612a6e565b5b602082029050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000600a9050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006129888261299b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6129ce82612a9d565b810181811067ffffffffffffffff821117156129ed576129ec612a6e565b5b80604052505050565b6000612a01826129bb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a3457612a33612a3f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f546f6b656e2041646472657373206d757374206e6f74206265207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5573657220616c726561647920656e74657265642074686520706f6f6c000000600082015250565b7f54686520706f6f6c20686173206e6f74206265656e20656e6465642079657400600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e6f206665657320686173206265656e20636f6c6c6563746564207965742e00600082015250565b7f41646472657373206973206e6f74204175746841646472657373000000000000600082015250565b7f506f6f6c2068617320616c726561647920737461727465642e00000000000000600082015250565b7f54686520706f6f6c20686173206e6f74206265656e20656e646564207965742e600082015250565b7f53746172742074696d652063616e6e6f7420626520677265617465722074686160008201527f6e20656e642074696d652e000000000000000000000000000000000000000000602082015250565b7f53746172742074696d65206d7573742062652067726561746f72207468616e2060008201527f63757272656e742074696d650000000000000000000000000000000000000000602082015250565b7f57696e6e657273206d757374206265206c657373207468616e20746f74616c2060008201527f75736572732e0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f57696e6e6572732061726520616c72656164792073657420666f72207468697360008201527f20706f6f6c2e0000000000000000000000000000000000000000000000000000602082015250565b7f596f7520646f6e742068617665206d696e696d756d20526f626f446f6765205460008201527f6f6b656e732e0000000000000000000000000000000000000000000000000000602082015250565b7f506f6f6c204944206d7573742065786973740000000000000000000000000000600082015250565b7f596f7520617265206e6f74207468652077696e6e657220666f7220746869732060008201527f706f736974696f6e2e0000000000000000000000000000000000000000000000602082015250565b612e778161297d565b8114612e8257600080fd5b50565b612e8e8161298f565b8114612e9957600080fd5b50565b612ea5816129bb565b8114612eb057600080fd5b5056fea2646970667358221220e7b7e3e0e400459b23221b9ce477137adf42de475d6725ace8659d05af23f7cc64736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101095760003560e01c80637e9c0891116100955780639e3079cb116100645780639e3079cb14610347578063a5a7274e14610372578063ac4afa381461039d578063efa5aa19146103dd578063f2fde38b1461040657610109565b80637e9c08911461028d57806386bb8f37146102ca5780638da5cb5b146102f3578063970d6a3f1461031e57610109565b80632b2e05c1116100dc5780632b2e05c1146101a75780632c224e51146101d05780632f380b35146101fc578063715018a6146102395780637488fcf51461025057610109565b806302625c1d1461010e5780630a54a4521461012a578063164e68de14610155578063264f173e1461017e575b600080fd5b61012860048036038101906101239190611eba565b61042f565b005b34801561013657600080fd5b5061013f610824565b60405161014c919061276c565b60405180910390f35b34801561016157600080fd5b5061017c60048036038101906101779190611da0565b61082a565b005b34801561018a57600080fd5b506101a560048036038101906101a09190611df2565b610a41565b005b3480156101b357600080fd5b506101ce60048036038101906101c99190611da0565b610ac7565b005b3480156101dc57600080fd5b506101e5610b87565b6040516101f39291906124fe565b60405180910390f35b34801561020857600080fd5b50610223600480360381019061021e9190611df2565b610ca1565b604051610230919061272e565b60405180910390f35b34801561024557600080fd5b5061024e610dd0565b005b34801561025c57600080fd5b5061027760048036038101906102729190611e1b565b610e58565b6040516102849190612750565b60405180910390f35b34801561029957600080fd5b506102b460048036038101906102af9190611da0565b610f3e565b6040516102c1919061276c565b60405180910390f35b3480156102d657600080fd5b506102f160048036038101906102ec9190611f76565b610f56565b005b3480156102ff57600080fd5b5061030861124c565b604051610315919061244b565b60405180910390f35b34801561032a57600080fd5b5061034560048036038101906103409190611ef7565b611275565b005b34801561035357600080fd5b5061035c6114fc565b604051610369919061276c565b60405180910390f35b34801561037e57600080fd5b50610387611502565b604051610394919061244b565b60405180910390f35b3480156103a957600080fd5b506103c460048036038101906103bf9190611df2565b611528565b6040516103d49493929190612787565b60405180910390f35b3480156103e957600080fd5b5061040460048036038101906103ff9190611e57565b611578565b005b34801561041257600080fd5b5061042d60048036038101906104289190611da0565b6117f5565b005b6000600354811015610476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046d906126ce565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166007600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000600a811061051a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610592576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105899061254e565b60405180910390fd5b600660008481526020019081526020016000206002015442106105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e1906125ee565b60405180910390fd5b600554831061062e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610625906126ee565b60405180910390fd5b816007600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190600a6106909291906119b9565b506006600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060066000888152602001908152602001600020600001546040518463ffffffff1660e01b815260040161071a93929190612466565b602060405180830381600087803b15801561073457600080fd5b505af1158015610748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076c9190611dc9565b5060066000848152602001908152602001600020600401339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f698386947438dbfb4dbae71510c638c396bb35e2fcb05c26a2a94bad4290c3bf338484604051610817939291906124c6565b60405180910390a1505050565b60035481565b6108326118ed565b73ffffffffffffffffffffffffffffffffffffffff1661085061124c565b73ffffffffffffffffffffffffffffffffffffffff16146108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d9061268e565b60405180910390fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610928576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091f906125ae565b60405180910390fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016109ea92919061249d565b602060405180830381600087803b158015610a0457600080fd5b505af1158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c9190611dc9565b505050565b610a496118ed565b73ffffffffffffffffffffffffffffffffffffffff16610a6761124c565b73ffffffffffffffffffffffffffffffffffffffff1614610abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab49061268e565b60405180910390fd5b8060038190555050565b610acf6118ed565b73ffffffffffffffffffffffffffffffffffffffff16610aed61124c565b73ffffffffffffffffffffffffffffffffffffffff1614610b43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3a9061268e565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060008060055467ffffffffffffffff811115610bce577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610bfc5781602001602082028036833780820191505090505b5090506000805b600554811015610c9457600060066000838152602001908152602001600020600201541115610c815780838381518110610c66577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508180610c7d906129f6565b9250505b8080610c8c906129f6565b915050610c03565b5081819350935050509091565b610ca9611a36565b600660008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020018280548015610dc057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d76575b5050505050815250509050919050565b610dd86118ed565b73ffffffffffffffffffffffffffffffffffffffff16610df661124c565b73ffffffffffffffffffffffffffffffffffffffff1614610e4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e439061268e565b60405180910390fd5b610e5660006118f5565b565b610e60611a7b565b6007600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180602001604052908160008201600a806020026040519081016040528092919082600a8015610f2d576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ee3575b505050505081525050905092915050565b60086020528060005260406000206000915090505481565b600960008381526020019081526020016000206000018181548110610fa4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461103c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110339061270e565b60405180910390fd5b60066000838152602001908152602001600020600301544211611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b9061256e565b60405180910390fd5b60006009600084815260200190815260200160002060000182815481106110e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336009600086815260200190815260200160002060010184815481106111cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001546040518363ffffffff1660e01b81526004016111f592919061249d565b602060405180830381600087803b15801561120f57600080fd5b505af1158015611223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112479190611dc9565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fc906125ce565b60405180910390fd5b6006600084815260200190815260200160002060030154421161135d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113549061260e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960008581526020019081526020016000206000016000815481106113c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143c906126ae565b60405180910390fd5b60066000848152602001908152602001600020600401805490508251106114a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114989061266e565b60405180910390fd5b816009600085815260200190815260200160002060000190805190602001906114cb929190611a94565b50806009600085815260200190815260200160002060010190805190602001906114f6929190611b1e565b50505050565b60055481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154905084565b6115806118ed565b73ffffffffffffffffffffffffffffffffffffffff1661159e61124c565b73ffffffffffffffffffffffffffffffffffffffff16146115f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115eb9061268e565b60405180910390fd5b808210611636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162d9061262e565b60405180910390fd5b428211611678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166f9061264e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156116e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116df9061252e565b60405180910390fd5b8360066000600554815260200190815260200160002060000181905550816006600060055481526020019081526020016000206002018190555080600660006005548152602001908152602001600020600301819055508260066000600554815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4a387c1c496fd587cee4aeec2d3b960a0b382a9b678760dbe974026bdba919e0600554858484876040516117cf9594939291906127cc565b60405180910390a1600560008154809291906117ea906129f6565b919050555050505050565b6117fd6118ed565b73ffffffffffffffffffffffffffffffffffffffff1661181b61124c565b73ffffffffffffffffffffffffffffffffffffffff1614611871576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118689061268e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d89061258e565b60405180910390fd5b6118ea816118f5565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82600a8101928215611a25579160200282015b82811115611a245782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906119cc565b5b509050611a329190611b6b565b5090565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b6040518060200160405280611a8e611b88565b81525090565b828054828255906000526020600020908101928215611b0d579160200282015b82811115611b0c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611ab4565b5b509050611b1a9190611b6b565b5090565b828054828255906000526020600020908101928215611b5a579160200282015b82811115611b59578251825591602001919060010190611b3e565b5b509050611b679190611b6b565b5090565b5b80821115611b84576000816000905550600101611b6c565b5090565b604051806101400160405280600a90602082028036833780820191505090505090565b6000611bbe611bb984612844565b61281f565b90508082856020860282011115611bd457600080fd5b60005b85811015611c045781611bea8882611ce6565b845260208401935060208301925050600181019050611bd7565b5050509392505050565b6000611c21611c1c8461286a565b61281f565b90508083825260208201905082856020860282011115611c4057600080fd5b60005b85811015611c705781611c568882611ce6565b845260208401935060208301925050600181019050611c43565b5050509392505050565b6000611c8d611c8884612896565b61281f565b90508083825260208201905082856020860282011115611cac57600080fd5b60005b85811015611cdc5781611cc28882611d8b565b845260208401935060208301925050600181019050611caf565b5050509392505050565b600081359050611cf581612e6e565b92915050565b600082601f830112611d0c57600080fd5b600a611d19848285611bab565b91505092915050565b600082601f830112611d3357600080fd5b8135611d43848260208601611c0e565b91505092915050565b600082601f830112611d5d57600080fd5b8135611d6d848260208601611c7a565b91505092915050565b600081519050611d8581612e85565b92915050565b600081359050611d9a81612e9c565b92915050565b600060208284031215611db257600080fd5b6000611dc084828501611ce6565b91505092915050565b600060208284031215611ddb57600080fd5b6000611de984828501611d76565b91505092915050565b600060208284031215611e0457600080fd5b6000611e1284828501611d8b565b91505092915050565b60008060408385031215611e2e57600080fd5b6000611e3c85828601611d8b565b9250506020611e4d85828601611ce6565b9150509250929050565b60008060008060808587031215611e6d57600080fd5b6000611e7b87828801611d8b565b9450506020611e8c87828801611ce6565b9350506040611e9d87828801611d8b565b9250506060611eae87828801611d8b565b91505092959194509250565b6000806101608385031215611ece57600080fd5b6000611edc85828601611d8b565b9250506020611eed85828601611cfb565b9150509250929050565b600080600060608486031215611f0c57600080fd5b6000611f1a86828701611d8b565b935050602084013567ffffffffffffffff811115611f3757600080fd5b611f4386828701611d22565b925050604084013567ffffffffffffffff811115611f6057600080fd5b611f6c86828701611d4c565b9150509250925092565b60008060408385031215611f8957600080fd5b6000611f9785828601611d8b565b9250506020611fa885828601611d8b565b9150509250929050565b6000611fbe8383611fe2565b60208301905092915050565b6000611fd6838361242d565b60208301905092915050565b611feb8161297d565b82525050565b611ffa8161297d565b82525050565b612009816128ec565b6120138184612934565b925061201e826128c2565b8060005b8381101561204f5781516120368782611fb2565b96506120418361290d565b925050600181019050612022565b505050505050565b612060816128ec565b61206a818461293f565b9250612075826128c2565b8060005b838110156120a657815161208d8782611fb2565b96506120988361290d565b925050600181019050612079565b505050505050565b60006120b9826128f7565b6120c3818561294a565b93506120ce836128cc565b8060005b838110156120ff5781516120e68882611fb2565b97506120f18361291a565b9250506001810190506120d2565b5085935050505092915050565b600061211782612902565b612121818561295b565b935061212c836128dc565b8060005b8381101561215d5781516121448882611fca565b975061214f83612927565b925050600181019050612130565b5085935050505092915050565b600061217760268361296c565b915061218282612aae565b604082019050919050565b600061219a601d8361296c565b91506121a582612afd565b602082019050919050565b60006121bd601f8361296c565b91506121c882612b26565b602082019050919050565b60006121e060268361296c565b91506121eb82612b4f565b604082019050919050565b6000612203601f8361296c565b915061220e82612b9e565b602082019050919050565b6000612226601a8361296c565b915061223182612bc7565b602082019050919050565b600061224960198361296c565b915061225482612bf0565b602082019050919050565b600061226c60208361296c565b915061227782612c19565b602082019050919050565b600061228f602b8361296c565b915061229a82612c42565b604082019050919050565b60006122b2602c8361296c565b91506122bd82612c91565b604082019050919050565b60006122d560268361296c565b91506122e082612ce0565b604082019050919050565b60006122f860208361296c565b915061230382612d2f565b602082019050919050565b600061231b60268361296c565b915061232682612d58565b604082019050919050565b600061233e60268361296c565b915061234982612da7565b604082019050919050565b600061236160128361296c565b915061236c82612df6565b602082019050919050565b600061238460298361296c565b915061238f82612e1f565b604082019050919050565b600060a0830160008301516123b2600086018261242d565b5060208301516123c56020860182611fe2565b5060408301516123d8604086018261242d565b5060608301516123eb606086018261242d565b506080830151848203608086015261240382826120ae565b9150508091505092915050565b610140820160008201516124276000850182612000565b50505050565b612436816129bb565b82525050565b612445816129bb565b82525050565b60006020820190506124606000830184611ff1565b92915050565b600060608201905061247b6000830186611ff1565b6124886020830185611ff1565b612495604083018461243c565b949350505050565b60006040820190506124b26000830185611ff1565b6124bf602083018461243c565b9392505050565b6000610180820190506124dc6000830186611ff1565b6124e9602083018561243c565b6124f66040830184612057565b949350505050565b60006040820190508181036000830152612518818561210c565b9050612527602083018461243c565b9392505050565b600060208201905081810360008301526125478161216a565b9050919050565b600060208201905081810360008301526125678161218d565b9050919050565b60006020820190508181036000830152612587816121b0565b9050919050565b600060208201905081810360008301526125a7816121d3565b9050919050565b600060208201905081810360008301526125c7816121f6565b9050919050565b600060208201905081810360008301526125e781612219565b9050919050565b600060208201905081810360008301526126078161223c565b9050919050565b600060208201905081810360008301526126278161225f565b9050919050565b6000602082019050818103600083015261264781612282565b9050919050565b60006020820190508181036000830152612667816122a5565b9050919050565b60006020820190508181036000830152612687816122c8565b9050919050565b600060208201905081810360008301526126a7816122eb565b9050919050565b600060208201905081810360008301526126c78161230e565b9050919050565b600060208201905081810360008301526126e781612331565b9050919050565b6000602082019050818103600083015261270781612354565b9050919050565b6000602082019050818103600083015261272781612377565b9050919050565b60006020820190508181036000830152612748818461239a565b905092915050565b6000610140820190506127666000830184612410565b92915050565b6000602082019050612781600083018461243c565b92915050565b600060808201905061279c600083018761243c565b6127a96020830186611ff1565b6127b6604083018561243c565b6127c3606083018461243c565b95945050505050565b600060a0820190506127e1600083018861243c565b6127ee602083018761243c565b6127fb604083018661243c565b612808606083018561243c565b6128156080830184611ff1565b9695505050505050565b600061282961283a565b905061283582826129c5565b919050565b6000604051905090565b600067ffffffffffffffff82111561285f5761285e612a6e565b5b602082029050919050565b600067ffffffffffffffff82111561288557612884612a6e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156128b1576128b0612a6e565b5b602082029050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000600a9050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006129888261299b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6129ce82612a9d565b810181811067ffffffffffffffff821117156129ed576129ec612a6e565b5b80604052505050565b6000612a01826129bb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a3457612a33612a3f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f546f6b656e2041646472657373206d757374206e6f74206265207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5573657220616c726561647920656e74657265642074686520706f6f6c000000600082015250565b7f54686520706f6f6c20686173206e6f74206265656e20656e6465642079657400600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e6f206665657320686173206265656e20636f6c6c6563746564207965742e00600082015250565b7f41646472657373206973206e6f74204175746841646472657373000000000000600082015250565b7f506f6f6c2068617320616c726561647920737461727465642e00000000000000600082015250565b7f54686520706f6f6c20686173206e6f74206265656e20656e646564207965742e600082015250565b7f53746172742074696d652063616e6e6f7420626520677265617465722074686160008201527f6e20656e642074696d652e000000000000000000000000000000000000000000602082015250565b7f53746172742074696d65206d7573742062652067726561746f72207468616e2060008201527f63757272656e742074696d650000000000000000000000000000000000000000602082015250565b7f57696e6e657273206d757374206265206c657373207468616e20746f74616c2060008201527f75736572732e0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f57696e6e6572732061726520616c72656164792073657420666f72207468697360008201527f20706f6f6c2e0000000000000000000000000000000000000000000000000000602082015250565b7f596f7520646f6e742068617665206d696e696d756d20526f626f446f6765205460008201527f6f6b656e732e0000000000000000000000000000000000000000000000000000602082015250565b7f506f6f6c204944206d7573742065786973740000000000000000000000000000600082015250565b7f596f7520617265206e6f74207468652077696e6e657220666f7220746869732060008201527f706f736974696f6e2e0000000000000000000000000000000000000000000000602082015250565b612e778161297d565b8114612e8257600080fd5b50565b612e8e8161298f565b8114612e9957600080fd5b50565b612ea5816129bb565b8114612eb057600080fd5b5056fea2646970667358221220e7b7e3e0e400459b23221b9ce477137adf42de475d6725ace8659d05af23f7cc64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 200,
        "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(RoboDogeCoin)172"
      },
      {
        "astId": 203,
        "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
        "label": "staking",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(RoboDogeStaking)195"
      },
      {
        "astId": 229,
        "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
        "label": "minimumTokenBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 231,
        "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
        "label": "AuthAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 234,
        "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
        "label": "poolCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 239,
        "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
        "label": "pools",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(pool)215_storage)"
      },
      {
        "astId": 246,
        "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
        "label": "userSelection",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(userDetails)220_storage))"
      },
      {
        "astId": 250,
        "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
        "label": "feeAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 255,
        "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
        "label": "winnerDetails",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(winner)227_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)10_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(RoboDogeCoin)172": {
        "encoding": "inplace",
        "label": "contract RoboDogeCoin",
        "numberOfBytes": "20"
      },
      "t_contract(RoboDogeStaking)195": {
        "encoding": "inplace",
        "label": "contract RoboDogeStaking",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(userDetails)220_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FantasyCrypto.userDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(userDetails)220_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(userDetails)220_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct FantasyCrypto.userDetails))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(userDetails)220_storage)"
      },
      "t_mapping(t_uint256,t_struct(pool)215_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FantasyCrypto.pool)",
        "numberOfBytes": "32",
        "value": "t_struct(pool)215_storage"
      },
      "t_mapping(t_uint256,t_struct(winner)227_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FantasyCrypto.winner)",
        "numberOfBytes": "32",
        "value": "t_struct(winner)227_storage"
      },
      "t_struct(pool)215_storage": {
        "encoding": "inplace",
        "label": "struct FantasyCrypto.pool",
        "members": [
          {
            "astId": 205,
            "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
            "label": "entryFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 207,
            "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 209,
            "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 211,
            "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 214,
            "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
            "label": "userAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(userDetails)220_storage": {
        "encoding": "inplace",
        "label": "struct FantasyCrypto.userDetails",
        "members": [
          {
            "astId": 219,
            "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
            "label": "aggregatorAddresses",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)10_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(winner)227_storage": {
        "encoding": "inplace",
        "label": "struct FantasyCrypto.winner",
        "members": [
          {
            "astId": 223,
            "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 226,
            "contract": "contracts/FantasyCrypto.sol:FantasyCrypto",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}