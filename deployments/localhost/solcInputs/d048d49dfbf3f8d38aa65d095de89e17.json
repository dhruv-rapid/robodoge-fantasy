{
  "language": "Solidity",
  "sources": {
    "contracts/FantasyCrypto.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n}\n\ninterface AggregatorV3Interface {\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ninterface RoboDogeCoin {\n    function balanceOf(address _address) external view returns (uint256);\n}\n\ninterface RoboDogeStaking {\n    struct Stake {\n        uint256 tAmount;\n        uint256 rAmount;\n        uint256 time;\n        uint256 period;\n        uint256 rate;\n        bool isActive;\n    }\n\n    function getAllStakes(address _address)\n        external\n        view\n        returns (Stake[] memory);\n}\n\ncontract FantasyCrypto is Ownable {\n    RoboDogeCoin private token;\n    RoboDogeStaking private staking;\n\n    struct pool {\n        uint256 entryFee;\n        address tokenAddress;\n        uint256 startTime;\n        uint256 endTime;\n        address[] userAddress;\n    }\n    struct userDetails {\n        address[10] aggregatorAddresses;\n    }\n\n    struct winner {\n        address[] user;\n        uint256[] amount;\n    }\n\n    uint256 public minimumTokenBalance;\n    address public AuthAddress;\n    uint256 public poolCounter = 0;\n    mapping(uint256 => pool) public pools;\n    mapping(uint256 => mapping(address => userDetails)) internal userSelection;\n    mapping(address => uint256) public feeAmount;\n    mapping(uint256 => winner) internal winnerDetails;\n\n    event poolCreated(\n        uint256 poolID,\n        uint256 entryFees,\n        uint256 startTime,\n        uint256 endTime,\n        address tokenAddress\n    );\n    event enteredPool(\n        address user,\n        uint256 poolID,\n        address[10] aggregatorAddress\n    );\n    event rewardsDistributed(\n        uint256 poolID,\n        address[] winner,\n        uint256[] amount\n    );\n\n    constructor(\n        address auth,\n        uint256 _minimumTokenBalance,\n        address _robodogeToken,\n        address _roboDogeStaking\n    ) {\n        AuthAddress = auth;\n        minimumTokenBalance = _minimumTokenBalance;\n        token = RoboDogeCoin(_robodogeToken);\n        staking = RoboDogeStaking(_roboDogeStaking);\n    }\n\n    modifier isAuth() {\n        require(msg.sender == AuthAddress, \"Address is not AuthAddress\");\n        _;\n    }\n\n    function createPool(\n        uint256 entryFees,\n        address _tokenAddress,\n        uint256 _startTime,\n        uint256 _endTime\n    ) external onlyOwner {\n        require(\n            _startTime < _endTime,\n            \"Start time cannot be greater than end time.\"\n        );\n        require(\n            _startTime > block.timestamp,\n            \"Start time must be greator than current time\"\n        );\n        require(\n            _tokenAddress != address(0),\n            \"Token Address must not be zero address\"\n        );\n        pools[poolCounter].entryFee = entryFees;\n        pools[poolCounter].startTime = _startTime;\n        pools[poolCounter].endTime = _endTime;\n        pools[poolCounter].tokenAddress = _tokenAddress;\n        emit poolCreated(\n            poolCounter,\n            entryFees,\n            _startTime,\n            _endTime,\n            _tokenAddress\n        );\n        poolCounter++;\n    }\n\n    function enterPool(uint256 _poolID, address[10] memory _aggregatorAddress)\n        external\n        payable\n    {\n        uint256 sum = 0;\n        // if (token.balanceOf(msg.sender) < minimumTokenBalance) {\n        //     for (\n        //         uint256 i = 0;\n        //         i < staking.getAllStakes(msg.sender).length;\n        //         i++\n        //     ) {\n        //         if (staking.getAllStakes(msg.sender)[i].isActive) {\n        //             sum += staking.getAllStakes(msg.sender)[i].tAmount;\n        //         }\n        //     }\n        // }\n\n        require(\n            // token.balanceOf(msg.sender) >= minimumTokenBalance ||\n            sum >= minimumTokenBalance,\n            \"You dont have minimum RoboDoge Tokens.\"\n        );\n        require(\n            userSelection[_poolID][msg.sender].aggregatorAddresses[0] ==\n                address(0),\n            \"User already entered the pool\"\n        );\n        require(\n            block.timestamp < pools[_poolID].startTime,\n            \"Pool has already started.\"\n        );\n        require(_poolID < poolCounter, \"Pool ID must exist\");\n        // for (uint256 i = 0; i < 10; i++) {\n        //     address _address = _aggregatorAddress[i];\n        //     int256 answer;\n        //     (, answer, , , ) = AggregatorV3Interface(_address)\n        //         .latestRoundData();\n        //     require(answer > 0, \"Aggregator address does not exists\");\n        // }\n        userSelection[_poolID][msg.sender]\n            .aggregatorAddresses = _aggregatorAddress;\n        IERC20(pools[_poolID].tokenAddress).transferFrom(\n            msg.sender,\n            address(this),\n            pools[_poolID].entryFee\n        );\n        pools[_poolID].userAddress.push(msg.sender);\n        emit enteredPool(msg.sender, _poolID, _aggregatorAddress);\n    }\n\n    function withdrawFees(address tokenAddress) external onlyOwner {\n        require(feeAmount[tokenAddress] > 0, \"No fees has been collected yet.\");\n        uint256 fee = feeAmount[tokenAddress];\n        delete feeAmount[tokenAddress];\n        IERC20(tokenAddress).transfer(msg.sender, fee);\n    }\n\n    function setWinner(\n        uint256 _poolID,\n        address[] memory winners,\n        uint256[] memory amount\n    ) external isAuth {\n        require(\n            block.timestamp > pools[_poolID].endTime,\n            \"The pool has not been ended yet.\"\n        );\n        require(\n            winnerDetails[_poolID].user[0] == address(0),\n            \"Winners are already set for this pool.\"\n        );\n        require(\n            winners.length < pools[_poolID].userAddress.length,\n            \"Winners must be less than total users.\"\n        );\n        winnerDetails[_poolID].user = winners;\n        winnerDetails[_poolID].amount = amount;\n    }\n\n    function claimReward(uint256 _poolID, uint256 position) external {\n        require(\n            msg.sender == winnerDetails[_poolID].user[position],\n            \"You are not the winner for this position.\"\n        );\n        require(\n            block.timestamp > pools[_poolID].endTime,\n            \"The pool has not been ended yet\"\n        );\n        winnerDetails[_poolID].user[position] = address(0);\n        IERC20(pools[_poolID].tokenAddress).transfer(\n            msg.sender,\n            winnerDetails[_poolID].amount[position]\n        );\n    }\n\n    function setAuth(address _auth) external onlyOwner {\n        AuthAddress = _auth;\n    }\n\n    function setminimumTokenBalance(uint256 _minimumTokenBalance)\n        external\n        onlyOwner\n    {\n        minimumTokenBalance = _minimumTokenBalance;\n    }\n\n    function viewActivePools()\n        external\n        view\n        returns (uint256[] memory, uint256)\n    {\n        uint256[] memory activePools = new uint256[](poolCounter);\n        uint256 count = 0;\n        for (uint256 i = 0; i < poolCounter; i++) {\n            if (pools[i].startTime > 0) {\n                activePools[count] = i;\n                count++;\n            }\n        }\n        return (activePools, count);\n    }\n\n    function getPoolInfo(uint256 _poolID) external view returns (pool memory) {\n        return pools[_poolID];\n    }\n\n    function getUserSelectionInfo(uint256 _poolID, address _address)\n        external\n        view\n        returns (userDetails memory)\n    {\n        return userSelection[_poolID][_address];\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}